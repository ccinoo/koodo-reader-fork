name: Build/release

on: workflow_dispatch

jobs:
  release:
    runs-on: ${{ matrix.os }}

    # Platforms to build on/for
    strategy:
      matrix:
        os: [macos-latest, ubuntu-22.04, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 22

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1.2.0
        # Only install Snapcraft on Ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        with:
          # Log in to Snap Store
          snapcraft_token: ${{ secrets.snapcraft_token }}
      - name: Install Gcc
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt update
          sudo apt-get install gcc-multilib g++-multilib

      - name: Prepare for app notarization (macOS)
        if: startsWith(matrix.os, 'macos')
        # Import Apple API key for app notarization on macOS
        run: |
          mkdir -p ~/private_keys/
          echo ${{ github.ref }}
          echo '${{ secrets.api_key }}' > ~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8
          brew install python-setuptools
      - name: Set environment variable USE_HARD_LINKS
        run: echo "USE_HARD_LINKS=false" >> $GITHUB_ENV
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1.6.0
        with:
          build_script_name: "build"
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # macOS code signing certificate
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          # macOS notarization API key
          API_KEY_ID: ${{ secrets.api_key_id }}
          API_KEY_ISSUER_ID: ${{ secrets.api_key_issuer_id }}

      - name: Download files
        run: |
          curl -O https://dl.koodoreader.com/build/app-arm64-v8a-release.apk
          curl -O https://dl.koodoreader.com/build/app-universal-release.apk
          TAG=${GITHUB_REF##*/}
          echo "Current ref tag: $TAG"
          mv app-arm64-v8a-release.apk "Koodo-Reader-$TAG-arm64.apk"
          mv app-universal-release.apk "Koodo-Reader-$TAG-universal.apk"

      - name: Get current ref upload URL
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: process.env.GITHUB_REF.split('/').pop()
            });
            return release.data.upload_url;

      - name: Upload arm64 APK to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./Koodo-Reader-$TAG-arm64.apk
          asset_name: Koodo-Reader-$TAG-arm64.apk
          asset_content_type: application/vnd.android.package-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload universal APK to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./Koodo-Reader-$TAG-universal.apk
          asset_name: Koodo-Reader-$TAG-universal.apk
          asset_content_type: application/vnd.android.package-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
